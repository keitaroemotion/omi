#!/usr/bin/env ruby

#
# YOU NEED TO USE API_CALLER SUCH AS:
#
# ./api_caller scripts/[your script you want]
#
#
# XXX might need Turing Incomplete features 
#     such that enables executing the script files
#     consecutively the former script passes the
#     output to the latter.
#
# XXX might need to make this application installable  

require "colorize"

APIS = %w(card charge customer dispute refund token edit)
RESOURCES   = "/usr/local/etc/omi"
SCRIPTS     = "#{RESOURCES}/scripts"
CONFIG_PATH = "#{RESOURCES}/config"

def help(key=nil)
    key = ARGV[1] unless key
    if key == "apis"
      puts
      APIS.each {|a| puts a}
      puts
      abort
    end
    list = [
        "omi card     [key_word]",
        "omi charge   list_all       .... list all charges",
        "omi charge   update         .... update all charges", 
        "omi charge   list_all  list_all_charges",
        "omi charge   update    update_a_charge" ,
        "omi charge   reverse   reverse_an_uncaptured_charge",
        "omi charge   get       retrieve_a_charge",
        "omi charge   coib      create_an_offsite_internet_banking_charge",
        "omi charge   coa       create_an_offsite_alipay_charge",
        "omi charge   wt        charge_a_card_using_a_token",
        "omi charge   wcc       charge_a_card_using_a_customer_and_a_card",
        "omi charge   wc        charge_a_card_using_a_customer",
        "omi charge   capture   capture_an_authorized_charge",
        "omi customer [key_word]", 
        "omi dispute  [key_word]",
        "omi refund   [key_word]", 
        "omi token    add  [key_word] .... create a token", 
        "omi token    get  [key_word] .... retrieve a token", 
        "omi edit     [api_name] [key_word]",
    ]
    if key
      list = list.select{|x| x.include?("omi #{key}") }
    end
    puts
    list.each {|x| puts x}
    puts
    abort
end

if %w(help --h -h).include?(ARGV[0])
    help
end

HAS_EQUAL   = /^.+\=.+$/

def get_options
    list = ARGV
        .select { |a| a =~ HAS_EQUAL           }
        .map    { |a| a.split('=').map(&:to_s) }
        .flatten
    Hash[*list]  
end

options = get_options

abort "config file missing" unless File.exist?(CONFIG_PATH)

def config
    lines = File
        .open(CONFIG_PATH, "r")
        .each_line
        .to_a
        .select { |a| a =~ HAS_EQUAL } 
    lines.map{ |line| line.split("=").map(&:chomp) }.flatten
end

config_hash = Hash[*(config)]
skey        = config_hash["skey"]
pkey        = config_hash["pkey"]

def args
    ARGV.select {|a| /^[^\=]+$/ =~ a  && !APIS.include?(a) }
end

def options
    ARGV.select {|a| /^.+[\=]+.+$/ =~ a }
end

def api 
    api = ARGV.select {|a| APIS.include?(a.strip) }
    abort("api missing") unless api.size > 0
    api.first
end

def translate_charge(key)
    key = key.to_sym
    {
        list_all: "list_all_charges",
        update:   "update_a_charge", 
        reverse:  "reverse_an_uncaptured_charge",
        get:      "retrieve_a_charge",
        coib:     "create_an_offsite_internet_banking_charge",
        coa:      "create_an_offsite_alipay_charge",
        wt:       "charge_a_card_using_a_token",
        wcc:      "charge_a_card_using_a_customer_and_a_card",
        wc:       "charge_a_card_using_a_customer",
        capture:  "capture_an_authorized_charge",
    }[key]
end

def translate(api, key)
    key ||= ""
    result = nil
    case api
    when "charge"
        result = translate_charge(key)
    else
        abort("nope")
    end
    help(api) unless result
    result
end

def get_script_path(key)
    "#{SCRIPTS}/#{api}/#{translate(api, key)}"
end

script_path = get_script_path(args.first)
script_body = File.read(script_path).gsub("$skey", skey).gsub("$pkey", pkey)

def substitute(key, script_body, options, config)
    if script_body.include?("$#{key}")
        if options[key]
            script_body = script_body.gsub("$#{key}", options[key])  
        elsif config[key]    
            script_body = script_body.gsub("$#{key}", config[key])  
        else
            abort "You need argument #{key}="
        end
    end
    script_body
end        

def list_values_and_substitute(script_body, skey, api, prefix, options)
    if script_body.include?("$#{api}") 
       puts
       list = `curl -s -X GET https://api.omise.co/#{api}s -u #{skey}:`
           .split("\n")
           .select { |a| a.include?(prefix) }
           .map    { |a| /#{prefix}[a-z0-9_]+/.match(a).to_s.strip }
           .uniq
       if api == "customer" && options["customer"]
           value = options["customer"]
       else
           list.each_with_index { |e, i| 
               puts "[#{i}] #{e}"
           }
           print "\n[which?] "    
           input = $stdin.gets.chomp.to_i 
           value = list[input]
       end    
       script_body = script_body.gsub("$#{api}", value)
    end
    script_body
end

script_body = substitute("charge", script_body, options, config_hash)
script_body = substitute("token", script_body, options, config_hash)
script_body = substitute("dispute", script_body, options, config_hash)
script_body = substitute("amount", script_body, options, config_hash)
script_body = list_values_and_substitute(script_body, skey, "customer", "cust_", options)
script_body = list_values_and_substitute(script_body, skey, "charge", "chrg_", options)

unless script_path.include?("curl -s")
    script_body = script_body.gsub("curl", "curl -s")
end

puts "-------------------------"
puts "[Command]\n"
puts script_body.lines.select { |line| !(line.start_with?("#")) }.join.chomp.green
puts "-------------------------"

shell_execution_result = `#{script_body}`
puts shell_execution_result

if File.basename(script_path) == "create_a_token"
    token = shell_execution_result
        .split("\n")
        .select{ |a| a.include?("tokn_")             }
        .map   { |a| /tokn_[a-z0-9_]+/.match(a).to_s }
        .flatten
        .uniq
    `echo token=#{token.first} | pbcopy`    
end
