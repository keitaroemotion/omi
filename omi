#!/usr/bin/env ruby

#
# This is the script to reduce the amount of work
# when calling and interacting with the Omise Lib::Const.API.
#
# Author: Kei Sugano <tobasojyo@gmail.com>
#
#
# XXX add test cases
#

require "colorize"
require "date"
require "/usr/local/lib/omi/translation.rb"
require "/usr/local/lib/omi/key.rb"
require "/usr/local/lib/omi/const.rb"
require "/usr/local/lib/omi/find.rb"
require "/usr/local/lib/omi/scenario.rb"

RESOURCES   = "/usr/local/etc/omi"
SCRIPTS     = "#{RESOURCES}/scripts"
CONFIG_PATH = "#{RESOURCES}/config"
HAS_EQUAL   = /^.+\=.+$/

@argv = ARGV.map { |a| Lib::Const.apis_pl.include?(a) ? [a[0...-1], "list"] : a }.flatten

if @argv.include?("scenario")
  Lib::Scenario.execute
  abort
end

unless @argv
    abort("somehow argument is nil")
end

def help(key=nil)
    key = @argv[1] unless key
    if key == "apis"
        puts
        Lib::Const.apis.each {|a| puts a}
        puts
        abort
    end
    list = [
        "omi [card    ]  delete    ... delete a card",
        "omi [card    ]  list      ... list_all_cards",
        "omi [cards   ]            ... list_all_cards",
        "omi [card    ]  get       ... retrieve_a_card",
        "omi [card    ]  update    ... update_a_card",
        "omi [charge  ]  list      ... list all charges",
        "omi [charges ]            ... list all charges",
        "omi [charge  ]  update    ... update_a_charge" ,
        "omi [charge  ]  reverse   ... reverse_an_uncaptured_charge",
        "omi [charge  ]  get       ... retrieve_a_charge",
        "omi [charge  ]  coib      ... create_an_offsite_internet_banking_charge",
        "omi [charge  ]  coa       ... create_an_offsite_alipay_charge",
        "omi [charge  ]  wt        ... charge_a_card_using_a_token",
        "omi [charge  ]  wcc       ... charge_a_card_using_a_customer_and_a_card",
        "omi [charge  ]  wc        ... charge_a_card_using_a_customer",
        "omi [charge  ]  capture   ... capture_an_authorized_charge",
        "omi [customer]  delete    ... delete a customer", 
        "omi [customer]  create_wc ... create_a_customer_and_attach_a_card",
        "omi [customer]  create    ... create_a_customer",
        "omi [customer]  add_card  ... attach_a_card_to_customer",
        "omi [customer]  list      ... list_all_customers",
        "omi [customers]           ... list_all_customers",
        "omi [customer]  get       ... retrieve_a_customer",
        "omi [customer]  update    ... update_a_customer",
        "omi [disputes]            ... list_all_disputes",
        "omi [dispute ]  lao       ... list_all_open_disputes",
        "omi [dispute ]  lap       ... list_all_pending_disputes",
        "omi [dispute ]  lac       ... list_all_closed_disputes",
        "omi [dispute ]  get       ... retrieve_a_dispute",
        "omi [dispute ]  update    ... update_a_dispute",
        "omi [recipient] list      ... list_all_recipient",
        "omi [recipients]          ... list_all_recipient",
        "omi [recipient] create    ... create_a_recipient",
        "omi [recipient] get       ... retrieve_a_recipient",
        "omi [recipient] update    ... update_a_recipient",
        "omi [recipient] delete    ... delete_a_recipient" ,
        "omi [refund  ] create    ... create_a_refund",
        "omi [refund  ] list      ... list_all_refunds",
        "omi [refunds ]           ... list_all_refunds",
        "omi [refund  ] lap       ... list_all_refunds_of_particular_charge",
        "omi [refund  ] get       ... retrieve_a_refund",
        "omi [token   ] create    ... create a token", 
        "omi [token   ] get       ... retrieve a token", 
        "omi [transfer] create    ... create_a_transfer",
        "omi [transfer] cr3       ... create_a_transfer_to_third_party_recipient",
        "omi [transfer] delete    ... delete_a_transfer",
        "omi [transfer] list      ... list_all_transfers",
        "omi [transfers]          ... list_all_transfers",
        "omi [transfer] get       ... retrieve_a_transfer",
        "omi [transfer] update    ... update_a_transfer",
        "omi [schedule] list            ... list_all_schedules",
        "omi [schedules]                ... list_all_schedules",
        "omi [schedule] get             ... get a specific schedule",
        "omi [schedule] create_daily    ... charge with days interval",
        "omi [schedule] create_weekly   ... charge with weekly interval (ex. Mon, Wed)",
        "omi [schedule] create_monthly  ... charge with monthly interval",
        "omi [schedule] create_zig_zag  ... charge with inconsistent day per month",
        "omi [schedule] delete          ... charge with inconsistent day per month",
        "omi [trsch]    list           ... list all transfer schedules",
        "omi [trschs]                  ... list all transfer schedules",
        "omi [trsch]    list_of_recp   ... list all transfer schedules of given recipient",
        "omi [trsch]    get            ... get a specific transfer schedule",
        "omi [trsch]    create_daily   ... create a daily transfer schedule",
        "omi [trsch]    create_weekly  ... create a weekly transfer schedule",
        "omi [trsch]    create_zig_zag ... create transfer schedule with inconsistent day per month",
        "omi [scenario] [story_path]   ... execute the scenario",
        "omi [edit    ] [api_name] [key_word]",
    ]
    if key
        list = list.select{|x| x.include?("omi [#{key}") }
    end
    puts
    list.each {|x| puts x}
    puts "[option: -d dry_run]"
    puts "[option: -e allows editing the command before execution]"
    puts "[option: -v allows viewing the execution result]"
    puts "[option: -l swaps URL into localhost]"
    puts "[option: count counts the number of result records]"
    puts "[option: --rich enables rich output]"
    puts
    abort
end

if %w(help --h -h).include?(@argv[0])
    help
end

def get_options
    list = @argv
        .select { |a| a =~ HAS_EQUAL           }
        .map    { |a| a.split('=').map(&:to_s) }
        .flatten
    Hash[*list]  
end

def vim?
    @argv.include?("--vim") || @argv.include?("-v")
end

options = get_options

config_hash = Lib::Key.config_hash(CONFIG_PATH, HAS_EQUAL)
keys        = Lib::Key.get_keys(@argv)
skey        = Lib::Key.skey(keys, config_hash)
pkey        = Lib::Key.pkey(keys, config_hash)

def args
    @argv.select {|a| /^[^\=]+$/ =~ a  && !Lib::Const.apis.include?(a) }
end

#
# extract the [key]=[value] pair from the @argv
# 
def options
    @argv.select {|a| /^.+[\=]+.+$/ =~ a }
end

def dry_run?
    @argv.select {|a| a == "-d" }.first
end

def localhost?
    @argv.include?("-l")
end

#
# extract the api optcode from the @argv
#
def api 
    api = @argv.select {|a| Lib::Const.apis.include?(a.strip) }
    unless api.size > 0
        puts "\napi missing. please input any of the following:\n\n"
        Lib::Const.apis.each {|a| puts a}
        puts
        abort
    end
    api.first
end

#
# Mapping function such as:
#
# [api_identifier] -> /[api_identifier]/[api_file_name under the script repository]
#
def translate(api, key)
    api_translation = {
        charge:    Lib::Translation.translate_charge,
        card:      Lib::Translation.translate_card,
        customer:  Lib::Translation.translate_customer,
        token:     Lib::Translation.translate_token,
        dispute:   Lib::Translation.translate_dispute,
        refund:    Lib::Translation.translate_refund,
        recipient: Lib::Translation.translate_recipient,
        transfer:  Lib::Translation.translate_transfer,
        schedule:  Lib::Translation.translate_schedule,
        trsch:     Lib::Translation.translate_trsch,
    }[api.to_sym]
    abort "api translation missing of #{api}" unless api_translation 
    result = api_translation[(key || "").to_sym]
    if !result
        puts "translation missing for key: #{key}".red
        help(api)
    end    
    result
end

def lang
    languages = %w(ruby python java)
    languages.each do |l|
        if @argv.include?(l)
            return l
        end
    end
    nil
end

def get_script_path(key, language)
    language ||= "curl"
    script_path = "#{SCRIPTS}/#{language}/#{api}/#{translate(api, key)}"
                      .gsub("trsch", "transfer_schedules")
    unless File.exist?(script_path)
        abort("\nscript_path #{script_path} does not exist\n\n")
    end
    script_path
end

def verbs
    verb = @argv.select do |a|
        %w(
            create
            create_daily
            create_weekly
            create_monthly
            create_zig_zag
            delete
            create_wc
            add_card
            insufficient_fund
            list
            list_of_recp
            get
            update
            coib
            coa
            wcc
            wc
            capture
            reverse
            cr3
        ).include?(a)
    end.first    
    verb || help(api)
    verb
end

script_path = get_script_path(verbs, lang)
script_body = File.read(script_path)
                  .gsub("$skey", skey)
                  .gsub("$pkey", pkey)

#
# gsub the $[key] parameter in script file 
# into the value of @argv option [key]=[value]
#
def gsub(key, script_body, options, config)
    if script_body.include?("$#{key}")
        if options[key]
            script_body = script_body.gsub("$#{key}", options[key])  
        elsif config[key]    
            script_body = script_body.gsub("$#{key}", config[key])  
        else
            #
            # DEFAULT VALUE SET
            #
            if key == "start_date"
                return script_body.gsub("$#{key}", DateTime.now.to_s[0...10])  
            elsif key == "end_date"
                return script_body.gsub("$#{key}", (DateTime.now.next_day(36500)).to_s[0...10])  
            else    
                abort "You need argument #{key}="
            end
        end
        #
        # additonal validation
        #
        if key == "every"
            unless /^\d+$/ =~ options[key]
                puts "every should be set as interger".red
                abort
            end
        end
        if key == "start_date"
            unless /\d{4}-\d{2}-\d{2}/ =~ options[key]
                puts "start_date should be set as yyyy-MM-dd".red
                abort
            end
        end

        if key == "end_date"
            unless /\d{4}-\d{2}-\d{2}/ =~ options[key]
                puts "end_date should be set as yyyy-MM-dd".red
                abort
            end
        end
    end
    script_body
end        

def api_root
    "api.omise.co"
end

def host
    localhost? ? "http://api.lvh.me:3000" : "https://#{api_root}"
end

#
# XXX LITTLE BIT VERBOSE, NEEDS OPTIMIZATION HERE
#
def update_url_in_script_body(script, new_url)
    subdomain = api.start_with?("token") ? "vault" : "api"
    script = script.gsub("https://#{subdomain}.omise.co", new_url)
    if api.start_with?("token")  
        script = script.gsub("api.lvh.me:3000", "vault.lvh.me:4500")
    end  
    script
end

#
# XXX need this to be refactored as iteration
#
%w(
    transfer
    charge
    token
    dispute
    amount
    day
    every
    start_date
    end_date
    %
).each do |var|
    script_body = gsub(var, script_body, options, config_hash)
end

script_body, value = Lib::Find.fit(script_body, skey, "recipient", "recp_", options, host)
script_body, value = Lib::Find.fit(script_body, skey, "customer", "cust_", options, host)
script_body, value = Lib::Find.fit(script_body, skey, "charge", "chrg_", options, host, value)
script_body, value = Lib::Find.fit(script_body, skey, "card", "card_", options, host, value)
script_body, value = Lib::Find.fit(script_body, skey, "schedule", "schd_", options, host, value)

#
# script_body update
#
if localhost?
    script_body = update_url_in_script_body(script_body, "http://api.lvh.me:3000")
end  

unless script_path.include?("curl -s")
    script_body = script_body.gsub("curl", "curl -s")
end

def pre_edit?
    @argv.include?("-e")
end

#
# if the argument "-e" included in @argv,
# command can be edited with vim editor before its execution.
#
if pre_edit?
    tmp = ".tmp_file_omise"
    File.open(tmp, "w") { |f| f.puts script_body }
    system("vim #{tmp}")
    script_body = File.read(tmp)
    system("rm #{tmp}")
end

unless /curl\s+\-s/ =~ script_body
    script_body = script_body.gsub("curl", "curl -s")
end

def pre_edit?
    @argv.include?("-e")
end

#
# remove commented lines from the script file
#
command = script_body.lines.select { |line| !(line.start_with?("#")) }.join.chomp

if dry_run?
    result_file_name = "curl_result.tmp"
    if vim?
        File.open(result_file_name, "w") do |f|
            f.puts script_body
        end
        system "vim #{result_file_name}"
    else
        puts script_body
    end  
    abort  
end

#
# remove -s from curl
#
if @argv.include?("--rms")
    script_body = script_body.gsub("-s", "") 
    command     = command.gsub("-s", "")
end

def print_tmp_file(sentence)
    result_file_name = "curl_result.tmp"
    File.open(result_file_name, "w") do |f|
        f.puts sentence
    end
    result_file_name
end

@lang = lang

def get_detail
    {
        ruby: ["rb", "gem install omise"]
    }[@lang&.to_sym] || abort("language not supported")
end

if @lang
    detail = get_detail
else
    @lang = "curl"
end    

def exec(command, detail)
    if @lang == "curl"
        shell_execution_result = `#{command}`
    else
        tmp_exe = "tmp.#{detail[0]}"
        system "#{detail[1]}"
        File.open(tmp_exe, "w") { |f| f.puts command }
        shell_execution_result = `ruby #{tmp_exe}`
        system "rm #{tmp_exe}"
    end
    shell_execution_result
end

#
# this is the __main__ execution part
#
if vim?
    # result   = `#{script_body}`
    result = exec(command, detail)
    sentence = "#{script_body.strip}\n\n#{result}"
    result_file_name = print_tmp_file(sentence)
    system "vim #{result_file_name}"
else
    shell_execution_result = exec(command, detail)
    puts "-------------------------"
    puts "[Command]\n"
    puts command.green
    puts "-------------------------"

    puts "[Result]"

    if shell_execution_result.include?("<div")
        print_tmp_file(shell_execution_result)
        system "open result.html"
        abort
    else
        if shell_execution_result.include?("\"security_code_check\": false")
            puts shell_execution_result.gsub(/("security_code_check"\:\sfalse)/, "\\1".red)
            puts "[charge failed]".red
        elsif @argv.include?("count")
            puts "Total: #{JSON.parse(shell_execution_result)["data"].size}"    
        elsif @argv.include?("--rich")
            Lib::Find.fit_map(JSON.parse(shell_execution_result), "chrg_").each do |x|
                puts x
                puts
            end
        else    
            puts shell_execution_result
        end    
        if shell_execution_result.include?("authentication_failure")
            puts "is your skey/pkey really correct?".red
        end
    end

    if File.basename(script_path) == "create_a_token"
        token = shell_execution_result
            .split("\n")
            .select{ |a| a.include?("tokn_")             }
            .map   { |a| /tokn_[a-z0-9_]+/.match(a).to_s }
            .flatten
            .uniq
        if @argv.include?("--nocopy")    
          puts token
        else
          `echo token=#{token.first} | pbcopy`    
        end  
    end
end    
