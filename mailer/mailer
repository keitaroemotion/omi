#!/usr/bin/env ruby

#
# author: Kei Sugano <tobasojyo@gmail.com>
#
# Easy Mailer Sample Implementation
# For the Gmail Sender, you need to update
# Configuration to allow less secure apps turned ON:
# [https://myaccount.google.com/lesssecureapps]
#

require 'mail'
require 'io/console'

def help
  puts
  puts "mailer [-h] ... help"
  puts "mailer [-i] ... interactive password input"
  puts
end

def guide_config(config)
  unless File.exist?(config)
    File.open(config, "w") do |f|
      f.puts("sender_email_address=[email address]")
      f.puts("pass=[password for the sender_email_address]")
      f.puts("default_target_addresses=[target email addresses. if plural, it must be separated with comma. no space allowed]")
    end
    abort("\nYou need to edit file: #{config}\n\n")
  end
end

def parse_config(config)
  guide_config(CONFIG_PATH)
  array = File.read(config).split("\n").map { |line|
    line.split("=")      
  }.flatten
  Hash[*array]
end

CONFIG_PATH = "config"
config_hash          = parse_config(CONFIG_PATH)
sender_email_address = config_hash["sender_email_address"]
target_addresses     = config_hash["default_target_addresses"].split(",")
user_name            = /^[^@]+/.match(sender_email_address).to_s
pass                 = config_hash["pass"]

def get_input(label)
  print "#{label}: "
  input = STDIN.noecho(&:gets).chomp
  puts
  input
end

def options
  ARGV.select {|arg| arg.start_with?("-") }
end

def pass(secret_hash)
  if options.include?("-i")
    get_input("pass")
  elsif(secret_hash["pass"])
    secret_hash["pass"]   
  else  
    abort("NONE. You need to add password to config")
  end
end

Mail.defaults do
  delivery_method :smtp, {
    address:              "smtp.gmail.com",
    port:                 587,
    domain:               "example.com", # this does not need to be changed
    user_name:            user_name,
    password:             pass,
    authentication:       'plain',
    enable_starttls_auto: true
  }
end

def build_mail(sender_email_address, recipient_email_address, _subject, _body)
  Mail.new do
    from    sender_email_address
    to      recipient_email_address 
    subject _subject
    body    _body
  end
end

def send_email(target_addresses, sender_email_address)
  target_addresses.each do |recipient_email_address| 
    mail = build_mail(sender_email_address, recipient_email_address, "This is a Test", "This is a body")
    mail.charset = "UTF-8"
    mail.content_transfer_encoding = "8bit"
    mail.deliver!
  end
rescue Net::SMTPAuthenticationError
  abort("\nEmailAddress/Password is incorrect: #{sender_email_address}\n\n")
end

send_email(target_addresses, sender_email_address)
